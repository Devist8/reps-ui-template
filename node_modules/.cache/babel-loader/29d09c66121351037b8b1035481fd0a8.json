{"ast":null,"code":"var _jsxFileName = \"C:\\\\Reps\\\\reps-ui-template\\\\src\\\\contexts\\\\FirebaseAuthContext.jsx\",\n    _s = $RefreshSig$();\n\nimport LoadingScreen from \"components/LoadingScreen\";\nimport { firebaseConfig } from \"config\";\nimport axios from \"axios\";\nimport { initializeApp } from \"firebase/app\";\nimport { createUserWithEmailAndPassword, FacebookAuthProvider, getAuth, GoogleAuthProvider, signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport { collection, doc, getFirestore, setDoc } from \"firebase/firestore\";\nimport { createContext, useEffect, useReducer } from \"react\";\nimport store from \"redux/store\";\nimport { SET_AUTHENTICATED } from \"redux/types\";\nimport { getUserData } from \"redux/actions/dataActions\"; // firebase app initialize\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseApp = initializeApp(firebaseConfig); // auth types\n// ==========================================\n\nvar Types;\n\n(function (Types) {\n  Types[\"Init\"] = \"INIT\";\n})(Types || (Types = {})); // ==========================================\n\n\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null\n};\n\nconst reducer = (state, action) => {\n  if (action.type === \"INIT\") {\n    const {\n      isAuthenticated,\n      user\n    } = action.payload;\n    return { ...state,\n      user,\n      isAuthenticated,\n      isInitialized: true\n    };\n  }\n\n  return state;\n};\n\nconst AuthContext = /*#__PURE__*/createContext({ ...initialState,\n  method: \"firebase\",\n  register: (email, password, name) => Promise.resolve(),\n  login: (email, password) => Promise.resolve(),\n  loginWithGoogle: () => Promise.resolve(),\n  loginWithFacebook: () => Promise.resolve(),\n  logout: () => Promise.resolve()\n}); // props type\n\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const auth = getAuth(firebaseApp);\n  const db = getFirestore(firebaseApp);\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        auth.currentUser.getIdToken().then(idToken => {\n          const FBIdToken = `Bearer ${idToken}`;\n          localStorage.setItem(\"FBIdToken\", FBIdToken);\n          dispatch({\n            type: SET_AUTHENTICATED\n          });\n          axios.defaults.headers.common[\"Authorization\"] = FBIdToken;\n          store.dispatch(getUserData());\n        });\n        dispatch({\n          type: Types.Init,\n          payload: {\n            isAuthenticated: true,\n            user: {\n              id: user.uid,\n              email: user.email,\n              avatar: user.photoURL,\n              name: user.displayName || \"Jason Alexander\"\n            }\n          }\n        });\n      } else {\n        dispatch({\n          type: Types.Init,\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    });\n    return () => unsubscribe();\n  }, [dispatch, auth]);\n\n  const login = (email, password) => {\n    return signInWithEmailAndPassword(auth, email, password);\n  };\n\n  const register = (email, password, name) => createUserWithEmailAndPassword(auth, email, password).then(async response => {\n    var _response$user;\n\n    const userCollection = collection(db, \"users\");\n    const findDoc = doc(userCollection, (_response$user = response.user) === null || _response$user === void 0 ? void 0 : _response$user.uid);\n    await setDoc(findDoc, {\n      email,\n      displayName: name,\n      uid: response.user.uid\n    });\n  }); // .catch((error) => error);\n  // const register = (email: string, password: string, name: string) => {\n  //   return createUserWithEmailAndPassword(auth, email, password);\n  // };\n\n\n  const loginWithGoogle = () => {\n    const provider = new GoogleAuthProvider();\n    return signInWithPopup(auth, provider);\n  };\n\n  const loginWithFacebook = () => {\n    const provider = new FacebookAuthProvider();\n    return signInWithPopup(auth, provider);\n  };\n\n  const logout = () => auth.signOut();\n\n  if (!state.isInitialized) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: { ...state,\n      method: \"firebase\",\n      //@ts-ignore\n      login,\n      logout,\n      //@ts-ignore\n      register,\n      //@ts-ignore\n      loginWithGoogle,\n      //@ts-ignore\n      loginWithFacebook\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = AuthProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Reps/reps-ui-template/src/contexts/FirebaseAuthContext.jsx"],"names":["LoadingScreen","firebaseConfig","axios","initializeApp","createUserWithEmailAndPassword","FacebookAuthProvider","getAuth","GoogleAuthProvider","signInWithEmailAndPassword","signInWithPopup","collection","doc","getFirestore","setDoc","createContext","useEffect","useReducer","store","SET_AUTHENTICATED","getUserData","firebaseApp","Types","initialState","isAuthenticated","isInitialized","user","reducer","state","action","type","payload","AuthContext","method","register","email","password","name","Promise","resolve","login","loginWithGoogle","loginWithFacebook","logout","AuthProvider","children","dispatch","auth","db","unsubscribe","onAuthStateChanged","currentUser","getIdToken","then","idToken","FBIdToken","localStorage","setItem","defaults","headers","common","Init","id","uid","avatar","photoURL","displayName","response","userCollection","findDoc","provider","signOut"],"mappings":"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","sourcesContent":["import LoadingScreen from \"components/LoadingScreen\";\nimport { firebaseConfig } from \"config\";\nimport axios from \"axios\";\nimport { initializeApp } from \"firebase/app\";\nimport {\n    createUserWithEmailAndPassword,\n    FacebookAuthProvider,\n    getAuth,\n    GoogleAuthProvider,\n    signInWithEmailAndPassword,\n    signInWithPopup,\n} from \"firebase/auth\";\nimport { collection, doc, getFirestore, setDoc } from \"firebase/firestore\";\nimport { createContext, useEffect, useReducer } from \"react\";\nimport store from \"redux/store\";\nimport { SET_AUTHENTICATED } from \"redux/types\";\nimport { getUserData } from \"redux/actions/dataActions\";\n// firebase app initialize\nconst firebaseApp = initializeApp(firebaseConfig); // auth types\n// ==========================================\n\nvar Types;\n\n(function (Types) {\n    Types[\"Init\"] = \"INIT\";\n})(Types || (Types = {}));\n\n// ==========================================\nconst initialState = {\n    isAuthenticated: false,\n    isInitialized: false,\n    user: null,\n};\n\nconst reducer = (state, action) => {\n    if (action.type === \"INIT\") {\n        const { isAuthenticated, user } = action.payload;\n        return { ...state, user, isAuthenticated, isInitialized: true };\n    }\n\n    return state;\n};\n\nconst AuthContext = createContext({\n    ...initialState,\n    method: \"firebase\",\n    register: (email, password, name) => Promise.resolve(),\n    login: (email, password) => Promise.resolve(),\n    loginWithGoogle: () => Promise.resolve(),\n    loginWithFacebook: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n}); // props type\n\nexport const AuthProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const auth = getAuth(firebaseApp);\n    const db = getFirestore(firebaseApp);\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged((user) => {\n            if (user) {\n                auth.currentUser.getIdToken().then((idToken) => {\n                    const FBIdToken = `Bearer ${idToken}`;\n                    localStorage.setItem(\"FBIdToken\", FBIdToken);\n                    dispatch({ type: SET_AUTHENTICATED });\n                    axios.defaults.headers.common[\"Authorization\"] = FBIdToken;\n                    store.dispatch(getUserData());\n                });\n                dispatch({\n                    type: Types.Init,\n                    payload: {\n                        isAuthenticated: true,\n                        user: {\n                            id: user.uid,\n                            email: user.email,\n                            avatar: user.photoURL,\n                            name: user.displayName || \"Jason Alexander\",\n                        },\n                    },\n                });\n            } else {\n                dispatch({\n                    type: Types.Init,\n                    payload: {\n                        isAuthenticated: false,\n                        user: null,\n                    },\n                });\n            }\n        });\n        return () => unsubscribe();\n    }, [dispatch, auth]);\n\n    const login = (email, password) => {\n        return signInWithEmailAndPassword(auth, email, password);\n    };\n\n    const register = (email, password, name) =>\n        createUserWithEmailAndPassword(auth, email, password).then(\n            async (response) => {\n                const userCollection = collection(db, \"users\");\n                const findDoc = doc(userCollection, response.user?.uid);\n                await setDoc(findDoc, {\n                    email,\n                    displayName: name,\n                    uid: response.user.uid,\n                });\n            }\n        ); // .catch((error) => error);\n    // const register = (email: string, password: string, name: string) => {\n    //   return createUserWithEmailAndPassword(auth, email, password);\n    // };\n\n    const loginWithGoogle = () => {\n        const provider = new GoogleAuthProvider();\n        return signInWithPopup(auth, provider);\n    };\n\n    const loginWithFacebook = () => {\n        const provider = new FacebookAuthProvider();\n        return signInWithPopup(auth, provider);\n    };\n\n    const logout = () => auth.signOut();\n\n    if (!state.isInitialized) {\n        return <LoadingScreen />;\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{\n                ...state,\n                method: \"firebase\",\n                //@ts-ignore\n                login,\n                logout,\n                //@ts-ignore\n                register,\n                //@ts-ignore\n                loginWithGoogle,\n                //@ts-ignore\n                loginWithFacebook,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}